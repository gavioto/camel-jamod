/*
 *  Copyright 2012 Steven Swor.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package cameljamod.demo.device;

import java.net.InetAddress;
import java.util.concurrent.ExecutionException;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import net.wimpi.modbus.ModbusCoupler;
import net.wimpi.modbus.net.ModbusTCPListener;
import net.wimpi.modbus.procimg.SimpleProcessImage;

/**
 *
 * @author Steven Swor
 */
public class App extends javax.swing.JFrame {

    private final SimpleProcessImage spi;
    private final ModbusTCPListener modbusListener;

    /**
     * Creates new form App
     */
    public App() {
        spi = new SimpleProcessImage();
        modbusListener = new ModbusTCPListener(1 + Runtime.getRuntime().availableProcessors());
        initComponents();
        for (int i = 0; i < 16; i++) {
            DigitalInputPanel digitalIn = new DigitalInputPanel(i, false);
            digitalInputsPanel.add(digitalIn);
            spi.addDigitalIn(digitalIn);
            DigitalOutputPanel digitalOut = new DigitalOutputPanel(i, false);
            digitalOutputsPanel.add(digitalOut);
            spi.addDigitalOut(digitalOut);
            if (i < 3) {
                InputRegisterPanel inputRegister = new InputRegisterPanel(i, 0);
                inputRegistersPanel.add(inputRegister);
                spi.addInputRegister(inputRegister);
                RegisterPanel register = new RegisterPanel(i, 0);
                registersPanel.add(register);
                spi.addRegister(register);
            }
        }
        ModbusCoupler.getReference().setMaster(false);
        ModbusCoupler.getReference().setProcessImage(spi);
        ModbusCoupler.getReference().setUnitID(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        settingsPanel = new javax.swing.JPanel();
        modbusPortLabel = new javax.swing.JLabel();
        modbusPortSpinner = new javax.swing.JSpinner();
        startStopButton = new javax.swing.JToggleButton();
        contentPanel = new javax.swing.JPanel();
        digitalInputsPanel = new javax.swing.JPanel();
        digitalOutputsPanel = new javax.swing.JPanel();
        inputRegistersPanel = new javax.swing.JPanel();
        registersPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Modbus Device Simulator");

        modbusPortLabel.setText("Modbus Port");
        settingsPanel.add(modbusPortLabel);

        modbusPortSpinner.setModel(new javax.swing.SpinnerNumberModel(1024, 0, 65535, 1));
        settingsPanel.add(modbusPortSpinner);

        startStopButton.setText("Start");
        startStopButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                startStopButtonItemStateChanged(evt);
            }
        });
        startStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopButtonActionPerformed(evt);
            }
        });
        settingsPanel.add(startStopButton);

        getContentPane().add(settingsPanel, java.awt.BorderLayout.NORTH);

        contentPanel.setLayout(new java.awt.GridBagLayout());

        digitalInputsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Digital Inputs"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        contentPanel.add(digitalInputsPanel, gridBagConstraints);

        digitalOutputsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Coils"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        contentPanel.add(digitalOutputsPanel, gridBagConstraints);

        inputRegistersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Input Registers")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        contentPanel.add(inputRegistersPanel, gridBagConstraints);

        registersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Holding Registers"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        contentPanel.add(registersPanel, gridBagConstraints);

        getContentPane().add(contentPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startStopButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_startStopButtonItemStateChanged
        if (startStopButton.isSelected()) {
            startServer();
        } else {
            stopServer();
        }
    }//GEN-LAST:event_startStopButtonItemStateChanged

    private void startStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startStopButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel, except for OS X
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        if (!System.getProperty("os.name").startsWith("Mac OS X")) {
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new App().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contentPanel;
    private javax.swing.JPanel digitalInputsPanel;
    private javax.swing.JPanel digitalOutputsPanel;
    private javax.swing.JPanel inputRegistersPanel;
    private javax.swing.JLabel modbusPortLabel;
    private javax.swing.JSpinner modbusPortSpinner;
    private javax.swing.JPanel registersPanel;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JToggleButton startStopButton;
    // End of variables declaration//GEN-END:variables

    private void settingsEnable(final boolean enabled) {
        modbusPortLabel.setEnabled(enabled);
        modbusPortSpinner.setEnabled(enabled);
    }

    private void startServer() {
        final int port = ((Integer) modbusPortSpinner.getValue()).intValue();
        new SwingWorker<Boolean, Object>() {

            @Override
            protected Boolean doInBackground() throws Exception {
                if (!modbusListener.isListening()) {
                    modbusListener.setAddress(InetAddress.getByName("0.0.0.0"));
                    modbusListener.setPort(port);
                    modbusListener.start();
                }
                return Boolean.valueOf(modbusListener.isListening());
            }

            @Override
            protected void done() {
                try {
                    Boolean result = get();
                    if (result.booleanValue()) {
                        settingsEnable(false);
                        startStopButton.setText("Stop");
                    } else {
                        settingsEnable(true);
                        startStopButton.setSelected(false);
                        startStopButton.setText("Start");
                    }
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                } catch (ExecutionException ex) {
                    JOptionPane.showMessageDialog(App.this, ex.getLocalizedMessage(), "Error", JOptionPane.WARNING_MESSAGE);
                    settingsEnable(true);
                    startStopButton.setSelected(false);
                    startStopButton.setText("Start");
                }
            }
        }.execute();

    }

    private void stopServer() {
        new SwingWorker<Object, Object>() {

            @Override
            protected Object doInBackground() throws Exception {
                if (modbusListener.isListening()) {
                    modbusListener.stop();
                }
                return null;
            }

            @Override
            protected void done() {
                settingsEnable(true);
                startStopButton.setSelected(false);
                startStopButton.setText("Start");
                try {
                    get();
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                } catch (ExecutionException ex) {
                    JOptionPane.showMessageDialog(App.this, ex.getCause().getLocalizedMessage(), "Error", JOptionPane.WARNING_MESSAGE);

                }
            }
        }.execute();
    }
}
