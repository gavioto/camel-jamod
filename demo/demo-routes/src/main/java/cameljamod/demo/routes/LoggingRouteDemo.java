/*
 *  Copyright 2012 Steven Swor.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package cameljamod.demo.routes;

import cameljamod.JamodComponent;
import ch.qos.logback.classic.Logger;
import java.lang.reflect.InvocationTargetException;
import java.net.URISyntaxException;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.camel.Component;
import org.apache.camel.ComponentConfiguration;
import org.apache.camel.LoggingLevel;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.impl.ParameterConfiguration;
import org.openide.explorer.propertysheet.PropertyPanel;
import org.openide.explorer.propertysheet.PropertySheet;
import org.openide.explorer.propertysheet.PropertySheetView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.nodes.PropertySupport;
import org.openide.nodes.Sheet;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Steven Swor
 */
public class LoggingRouteDemo extends javax.swing.JFrame {

    private static final Logger logger = (Logger) LoggerFactory.getLogger(LoggingRouteDemo.class);

    private final DefaultCamelContext camelContext;
    private RouteBuilder routeBuilder = null;

    private Preferences prefs = Preferences.userNodeForPackage(LoggingRouteDemo.class);

    /**
     * Creates new form LoggingRouteDemo
     */
    public LoggingRouteDemo() {
        camelContext = new DefaultCamelContext();
        configNode = new ConfigNode();
        configNode.createSheet();
        initComponents();
        propertySheetView = getPropertySheetView();
        configPanel.add(propertySheetView);
        JTextAreaAppender appender = new JTextAreaAppender();
        appender.setTextArea(loggingTextArea);
        appender.setContext(logger.getLoggerContext());
        appender.start();
        ((Logger) LoggerFactory.getLogger("loggingRoute")).addAppender(appender);

        camelUriTextField.setText(prefs.get(ROUTE_DEMO_URI_KEY, "jamod:tcp://localhost:1024/coils/0?count=8&changesOnly=true"));
        configNode.touchSheet(camelUriTextField.getText());
    }
    private PropertySheet propertySheetView;
    public static final String ROUTE_DEMO_KEY = "ROUTE_DEMO_";
    public static final String ROUTE_DEMO_URI_KEY = ROUTE_DEMO_KEY + "uri";

    private PropertySheet getPropertySheetView() {
        final PropertySheet propertySheet = new PropertySheet();
        propertySheet.setNodes(new Node[]{configNode});

        return propertySheet;
    }
    private final ConfigNode configNode;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        configPanel = new javax.swing.JPanel();
        loggingScrollPane = new javax.swing.JScrollPane();
        loggingTextArea = new javax.swing.JTextArea();
        startStopButton = new javax.swing.JToggleButton();
        camelUriTextField = new javax.swing.JTextField();
        camelUriLabel = new javax.swing.JLabel();
        refreshConfigButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Modbus Device Logging");
        setMinimumSize(new java.awt.Dimension(640, 480));

        configPanel.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("Configuration", configPanel);

        loggingTextArea.setEditable(false);
        loggingTextArea.setColumns(20);
        loggingTextArea.setFont(new java.awt.Font("Courier", 0, 13)); // NOI18N
        loggingTextArea.setRows(5);
        loggingScrollPane.setViewportView(loggingTextArea);

        jTabbedPane1.addTab("Output", loggingScrollPane);

        startStopButton.setText("Start");
        startStopButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                startStopButtonItemStateChanged(evt);
            }
        });

        camelUriTextField.setText("jamod:tcp://localhost:1024/coils/0?count=8&changesOnly=true");
        camelUriTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camelUriTextFieldActionPerformed(evt);
            }
        });

        camelUriLabel.setText("Camel Uri");

        refreshConfigButton.setText("Refresh Config");
        refreshConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshConfigButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTabbedPane1)
                    .add(layout.createSequentialGroup()
                        .add(camelUriLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(camelUriTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(startStopButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(refreshConfigButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(camelUriLabel)
                    .add(camelUriTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(startStopButton)
                    .add(refreshConfigButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startStopButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_startStopButtonItemStateChanged
        if (startStopButton.isSelected()) {
            startRoute();
        } else {
            stopRoute();
        }
    }//GEN-LAST:event_startStopButtonItemStateChanged

    private void camelUriTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camelUriTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_camelUriTextFieldActionPerformed

    private void refreshConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshConfigButtonActionPerformed
        configNode.touchSheet(camelUriTextField.getText());
    }//GEN-LAST:event_refreshConfigButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel, except for OS X
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        if (!System.getProperty("os.name").startsWith("Mac OS X")) {
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(LoggingRouteDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(LoggingRouteDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(LoggingRouteDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(LoggingRouteDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                final LoggingRouteDemo loggingRouteDemo = new LoggingRouteDemo();
                //Center this for our sanity...
                loggingRouteDemo.setLocationRelativeTo(null);
                loggingRouteDemo.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel camelUriLabel;
    private javax.swing.JTextField camelUriTextField;
    private javax.swing.JPanel configPanel;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JScrollPane loggingScrollPane;
    private javax.swing.JTextArea loggingTextArea;
    private javax.swing.JButton refreshConfigButton;
    private javax.swing.JToggleButton startStopButton;
    // End of variables declaration//GEN-END:variables

    private void settingsEnable(final boolean enable) {
        camelUriLabel.setEnabled(enable);
        camelUriTextField.setEnabled(enable);
    }

    private void startRoute() {
        loggingTextArea.setText("");
        final String modbusUri = camelUriTextField.getText();
        routeBuilder = new RouteBuilder(camelContext) {

            @Override
            public void configure() throws Exception {
                from(modbusUri).routeId("loggingRoute").log(LoggingLevel.INFO, "Received: ${body}").to("log:" + LoggingRouteDemo.class.getName() + "?showExchangePattern=false&showBodyType=false");
            }
        };
        new SwingWorker<Object, Object>() {

            @Override
            protected Object doInBackground() throws Exception {
                camelContext.start();
                LoggerFactory.getLogger(LoggingRouteDemo.class).info("Starting route");
                routeBuilder.addRoutesToCamelContext(camelContext);
                camelContext.startRoute("loggingRoute");
                LoggerFactory.getLogger(LoggingRouteDemo.class).info("Route started");
                prefs.put(ROUTE_DEMO_URI_KEY, modbusUri);
                prefs.flush();
                return null;
            }

            @Override
            protected void done() {
                try {
                    get();
                    settingsEnable(false);
                    startStopButton.setText("Stop");
                    jTabbedPane1.setSelectedComponent(loggingScrollPane);
                    configNode.setReadOnly(true);
                    refreshConfigButton.setEnabled(false);
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                } catch (ExecutionException ex) {
                    JOptionPane.showMessageDialog(LoggingRouteDemo.this, ex.getCause().getLocalizedMessage(), "Error", JOptionPane.WARNING_MESSAGE);
                    settingsEnable(true);
                    startStopButton.setText("Start");
                    startStopButton.setSelected(false);
                }
            }
        }.execute();

    }

    private void stopRoute() {
        new SwingWorker<Object, Object>() {

            protected Object doInBackground() throws Exception {
                LoggerFactory.getLogger(LoggingRouteDemo.class).info("Stopping route");
                camelContext.stopRoute("loggingRoute");
                camelContext.removeRoute("loggingRoute");
                LoggerFactory.getLogger(LoggingRouteDemo.class).info("Route stopped");
                camelContext.stop();
                return null;
            }

            @Override
            protected void done() {
                settingsEnable(true);
                startStopButton.setText("Start");
                startStopButton.setSelected(false);
                configNode.setReadOnly(false);
                refreshConfigButton.setEnabled(true);
                try {
                    get();
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                } catch (ExecutionException ex) {
                    JOptionPane.showMessageDialog(LoggingRouteDemo.this, ex.getCause().getLocalizedMessage(), "Error", JOptionPane.WARNING_MESSAGE);
                }
            }
        }.execute();
    }

    private class ConfigNode extends AbstractNode {

        Component camelComponent;
        ComponentConfiguration componentConfiguration;

        boolean readOnly = false;

        public ConfigNode() {
            super(Children.LEAF);
            camelComponent = camelContext.getComponent("jamod");
            componentConfiguration = camelComponent.createComponentConfiguration();
        }

        @Override
        protected Sheet createSheet() {
            Sheet retVal = super.createSheet();
            Sheet.Set dflt = Sheet.createPropertiesSet();
            dflt.setDisplayName("Default");
            Map<String, ParameterConfiguration> paramConfigs = componentConfiguration.getParameterConfigurationMap();
            for (String key : paramConfigs.keySet()) {
                final ParameterConfiguration paramConfig = paramConfigs.get(key);
                final String paramName = paramConfig.getName();
                if (readOnly) {
                    dflt.put(new PropertySupport.ReadOnly(paramName, paramConfig.getParameterType(), paramName, paramName) {

                        @Override
                        public Object getValue() throws IllegalAccessException, InvocationTargetException {
                            return componentConfiguration.getParameter(paramName);
                        }
                    });
                } else {
                    dflt.put(new PropertySupport.ReadWrite(paramName, paramConfig.getParameterType(), paramName, paramName) {

                        @Override
                        public Object getValue() throws IllegalAccessException, InvocationTargetException {

                            return componentConfiguration.getParameter(paramName);
                        }

                        @Override
                        public void setValue(Object val) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                            componentConfiguration.setParameter(paramName, val);
                            notifyUpdated();
                        }
                    });
                }
            }
            retVal.put(dflt);
            return retVal;
        }

        public void notifyUpdated() {
            camelUriTextField.setText(componentConfiguration.getUriString());
        }

        //Update the sheet...
        public void setReadOnly(boolean readOnly) {
            this.readOnly = readOnly;
            setSheet(createSheet());
        }

        public void touchSheet(String uri) {
            try {
                componentConfiguration.setUriString(uri);
                setSheet(createSheet());
            } catch (URISyntaxException ex) {
                logger.info("Invalid URI", ex);
            }
        }
    }
}
