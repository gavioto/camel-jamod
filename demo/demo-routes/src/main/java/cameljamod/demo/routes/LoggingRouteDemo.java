/*
 *  Copyright 2012 Steven Swor.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package cameljamod.demo.routes;

import ch.qos.logback.classic.Logger;
import java.util.concurrent.ExecutionException;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.apache.camel.LoggingLevel;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Steven Swor
 */
public class LoggingRouteDemo extends javax.swing.JFrame {
    
    private static final Logger logger = (Logger) LoggerFactory.getLogger(LoggingRouteDemo.class);

    private final DefaultCamelContext camelContext;
    private RouteBuilder routeBuilder = null;

    /**
     * Creates new form LoggingRouteDemo
     */
    public LoggingRouteDemo() {
        camelContext = new DefaultCamelContext();
        initComponents();
        JTextAreaAppender appender = new JTextAreaAppender();
        appender.setTextArea(loggingTextArea);
        appender.setContext(logger.getLoggerContext());
        appender.start();
        ((Logger)LoggerFactory.getLogger("loggingRoute")).addAppender(appender);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loggingScrollPane = new javax.swing.JScrollPane();
        loggingTextArea = new javax.swing.JTextArea();
        settingsPanel = new javax.swing.JPanel();
        camelUriLabel = new javax.swing.JLabel();
        camelUriTextField = new javax.swing.JTextField();
        startStopButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Modbus Device Logging");

        loggingTextArea.setColumns(20);
        loggingTextArea.setEditable(false);
        loggingTextArea.setFont(new java.awt.Font("Courier", 0, 13)); // NOI18N
        loggingTextArea.setRows(5);
        loggingScrollPane.setViewportView(loggingTextArea);

        getContentPane().add(loggingScrollPane, java.awt.BorderLayout.CENTER);

        camelUriLabel.setText("Camel Uri");
        settingsPanel.add(camelUriLabel);

        camelUriTextField.setText("jamod:tcp://localhost:1024/coils/0?count=8&changesOnly=true");
        settingsPanel.add(camelUriTextField);

        startStopButton.setText("Start");
        startStopButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                startStopButtonItemStateChanged(evt);
            }
        });
        settingsPanel.add(startStopButton);

        getContentPane().add(settingsPanel, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startStopButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_startStopButtonItemStateChanged
        if (startStopButton.isSelected()) {
            startRoute();
        } else {
            stopRoute();
        }
    }//GEN-LAST:event_startStopButtonItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel, except for OS X
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        if (!System.getProperty("os.name").startsWith("Mac OS X")) {
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(LoggingRouteDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(LoggingRouteDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(LoggingRouteDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(LoggingRouteDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new LoggingRouteDemo().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel camelUriLabel;
    private javax.swing.JTextField camelUriTextField;
    private javax.swing.JScrollPane loggingScrollPane;
    private javax.swing.JTextArea loggingTextArea;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JToggleButton startStopButton;
    // End of variables declaration//GEN-END:variables

    private void settingsEnable(final boolean enable) {
        camelUriLabel.setEnabled(enable);
        camelUriTextField.setEnabled(enable);
    }

    private void startRoute() {
        loggingTextArea.setText("");
        final String modbusUri = camelUriTextField.getText();
        routeBuilder = new RouteBuilder(camelContext) {

            @Override
            public void configure() throws Exception {
                from(modbusUri).routeId("loggingRoute").log(LoggingLevel.INFO, "Received: ${body}").to("log:" + LoggingRouteDemo.class.getName() + "?showExchangePattern=false&showBodyType=false");
            }
        };
        new SwingWorker<Object, Object>() {

            @Override
            protected Object doInBackground() throws Exception {
                camelContext.start();
                LoggerFactory.getLogger(LoggingRouteDemo.class).info("Starting route");
                routeBuilder.addRoutesToCamelContext(camelContext);
                camelContext.startRoute("loggingRoute");
                LoggerFactory.getLogger(LoggingRouteDemo.class).info("Route started");
                return null;
            }

            @Override
            protected void done() {
                try {
                    get();
                    settingsEnable(false);
                    startStopButton.setText("Stop");
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                } catch (ExecutionException ex) {
                    JOptionPane.showMessageDialog(LoggingRouteDemo.this, ex.getCause().getLocalizedMessage(), "Error", JOptionPane.WARNING_MESSAGE);
                    settingsEnable(true);
                    startStopButton.setText("Start");
                    startStopButton.setSelected(false);
                }
            }
        }.execute();

    }

    private void stopRoute() {
        new SwingWorker<Object, Object>() {

            protected Object doInBackground() throws Exception {
                LoggerFactory.getLogger(LoggingRouteDemo.class).info("Stopping route");
                camelContext.stopRoute("loggingRoute");
                camelContext.removeRoute("loggingRoute");
                LoggerFactory.getLogger(LoggingRouteDemo.class).info("Route stopped");
                camelContext.stop();
                return null;
            }

            @Override
            protected void done() {
                settingsEnable(true);
                startStopButton.setText("Start");
                startStopButton.setSelected(false);
                try {
                    get();
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                } catch (ExecutionException ex) {
                    JOptionPane.showMessageDialog(LoggingRouteDemo.this, ex.getCause().getLocalizedMessage(), "Error", JOptionPane.WARNING_MESSAGE);
                }
            }
        }.execute();
    }
}
